import ytdl from 'ytdl-core'; 
 import fs from 'fs'; 
 import os from 'os'; 
  
 let limit = 500; 
 let handler = async (m, { conn, args, isPrems, isOwner, usedPrefix, command }) => { 
   if (!args || !args[0]) throw `тЪая╕П Example:\n${usedPrefix + command} https://youtu.be/YzkTFFwxtXI`; 
   if (!args[0].match(/youtu/gi)) throw `Hey parth! Ush link ko verified karo be`; 
  
   let chat = global.db.data.chats[m.chat]; 
   m.react(rwait); 
   try { 
     const info = await ytdl.getInfo(args[0]); 
     const format = ytdl.chooseFormat(info.formats, { quality: 'highest' }); 
     if (!format) { 
       throw new Error('рдЕрд░реЗ рдкрд╛рд░реНрде! рдХреЛрдИ рдорд╛рдиреНрдп рд╕реНрд╡рд░реВрдк рдирд╣реАрдВ рдорд┐рд▓рд╛'); 
     } 
  
     if (format.contentLength / (1024 * 1024) >= limit) { 
       return m.reply(`тЪая╕П *GMX YouTube video download*\n\nтЦв *тЪЦя╕ПSize*: ${format.contentLength / (1024 * 1024).toFixed(2)}MB\nтЦв *ЁЯОЮя╕ПQuality*: ${format.qualityLabel}\n\nHey parth! рдлрд╝рд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рд╕реАрдорд╛ рд╕реЗ рдЕрдзрд┐рдХ рд╣реИ*+${limit} MB*`); 
     } 
  
     const tmpDir = os.tmpdir(); 
     const fileName = `${tmpDir}/${info.videoDetails.videoId}.mp4`; 
  
     const writableStream = fs.createWriteStream(fileName); 
     ytdl(args[0], { 
       quality: format.itag, 
     }).pipe(writableStream); 
  
     writableStream.on('finish', () => { 
       conn.sendFile( 
         m.chat, 
         fs.readFileSync(fileName), 
         `${info.videoDetails.videoId}.mp4`, 
         `тЪая╕П *GMX YouTube download ┬й*
            
           тЬ╝ Title: ${info.videoDetails.title} 
           тЬ╝ Duration: ${info.videoDetails.lengthSeconds} seconds 
           тЬ╝ Views: ${info.videoDetails.viewCount} 
           тЬ╝ Upload: ${info.videoDetails.publishDate} 
           тЬ╝ Link: ${args[0]} 
            
           Hey parth! Aapka din shubh ho тЬ╝`, 
         m, 
         false, 
         { asDocument: chat.useDocument } 
       ); 
  
       fs.unlinkSync(fileName); // Delete the temporary file 
       m.react(done); 
     }); 
  
     writableStream.on('error', (error) => { 
       console.error(error); 
       m.reply('рдЕрд░реЗ рдкрд╛рд░реНрде! рд╡реАрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐. рдХреГрдкрдпрд╛ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ.'); 
     }); 
   } catch (error) { 
     console.error(error); 
     m.reply('рдЕрд░реЗ рдкрд╛рд░реНрде! рд╡реАрдбрд┐рдпреЛ рд╕рдВрд╕рд╛рдзрд┐рдд рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐. рдХреГрдкрдпрд╛ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ.'); 
   } 
 }; 
  
 handler.help = ['ytmp4 <yt-link>']; 
 handler.tags = ['downloader']; 
 handler.command = ['ytmp4', 'video']; 
 handler.diamond = true; 
  
 export default handler;
